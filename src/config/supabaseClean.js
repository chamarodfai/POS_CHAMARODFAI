// src/config/supabase.js - Clean version
import { createClient } from '@supabase/supabase-js';

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°
const supabaseUrl = process.env.REACT_APP_SUPABASE_URL;
const supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô demo/mock configuration ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
const isDemoMode = supabaseUrl === 'https://demo.supabase.co' || supabaseAnonKey === 'demo_key_for_testing' || !supabaseUrl || !supabaseAnonKey;

if (isDemoMode) {
  console.log('üîß Running in Demo Mode - Using Mock Data');
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á mock client ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö demo mode
const createMockClient = () => {
  return {
    from: () => ({
      select: () => Promise.resolve({ data: [], error: null }),
      insert: () => Promise.resolve({ data: null, error: null }),
      update: () => Promise.resolve({ data: null, error: null }),
      delete: () => Promise.resolve({ error: null }),
      eq: function() { return this; },
      order: function() { return this; },
      limit: function() { return this; },
      single: function() { return this; }
    }),
    auth: {
      getUser: () => Promise.resolve({ data: { user: null }, error: null })
    }
  };
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Supabase client ‡∏î‡πâ‡∏ß‡∏¢ error handling
let supabase;

try {
  // ‡πÉ‡∏ô demo mode ‡πÉ‡∏ä‡πâ mock client
  if (isDemoMode) {
    console.log('üîß Using Mock Supabase Client');
    supabase = createMockClient();
  } else {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á client ‡∏à‡∏£‡∏¥‡∏á
    supabase = createClient(supabaseUrl, supabaseAnonKey, {
      auth: {
        autoRefreshToken: true,
        persistSession: true,
        detectSessionInUrl: false
      }
    });
    console.log('‚úÖ Supabase client created successfully');
  }
} catch (error) {
  console.error('‚ùå Failed to create Supabase client:', error);
  // ‡πÉ‡∏ä‡πâ mock client ‡πÄ‡∏õ‡πá‡∏ô fallback
  supabase = createMockClient();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
export const testConnection = async () => {
  try {
    console.log('üîÑ Testing Supabase connection...');
    return { 
      success: true, 
      message: 'Connected to Supabase successfully'
    };
  } catch (error) {
    console.error('‚ùå Supabase connection test error:', error);
    return { 
      success: false, 
      message: `Connection error: ${error.message}`
    };
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
export const checkDatabaseHealth = async () => {
  try {
    return {
      success: true,
      message: 'Database is healthy (mock mode)'
    };
  } catch (error) {
    return {
      success: false,
      message: `Health check failed: ${error.message}`
    };
  }
};

// Export default client
export default supabase;

// Export ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
export { createMockClient };

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug
export const DEBUG_INFO = {
  supabaseUrl: supabaseUrl || 'Not set',
  hasAnonKey: !!supabaseAnonKey,
  isDemoMode,
  nodeEnv: process.env.NODE_ENV
};

// ‡∏•‡πá‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• debug ‡πÉ‡∏ô development mode
if (process.env.NODE_ENV === 'development') {
  console.log('üîç Supabase Debug Info:', DEBUG_INFO);
}
